// <auto-generated />
using System;
using EventDriven.Domain.PoC.Repository.EF.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventDriven.Domain.PoC.Repository.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210312210844_added stuff 15")]
    partial class addedstuff15
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.AccountJournalEntry", b =>
                {
                    b.Property<long>("JournalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActingEmail")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ActingUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActingUserName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 3, 12, 21, 8, 43, 840, DateTimeKind.Unspecified).AddTicks(2489), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailActedUpon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Seen")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserActedUponId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserNameActedUpon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JournalId");

                    b.HasIndex("ActingUserId");

                    b.ToTable("AccountJournalEntry");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AddressTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CityBlockId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CountyId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlatNr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNumberSuffix")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TownId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserComment")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityBlockId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("TownId");

                    b.HasIndex("UndeletedById");

                    b.ToTable("Addresses", "Address");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.AddressType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("Types", "Address");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Audit.AuditTrail", b =>
                {
                    b.Property<long>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actions")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewData")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldData")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TableIdValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("AuditTrailId");

                    b.ToTable("DbAuditTrail", "Audit");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.CityBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("CityBlocks", "Address");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("Countries", "Address");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.County", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("Counties", "Address");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.OutboxPattern.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InternalCommands");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.OutboxPattern.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleIdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Town", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("Towns", "Misc");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BasicRole")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastVerificationFailureDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Oib")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetMsg")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserIdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LatestVerificationFailureMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerificationTokenExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Verified")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserRoleGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("UndeletedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ActiveTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TheUserHasBeenDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReactivatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactivatedReason")
                        .HasColumnType("TEXT");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UndeleteReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UndeletedById")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserRoleGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReactivatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UndeletedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.AccountJournalEntry", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActingUser")
                        .WithMany()
                        .HasForeignKey("ActingUserId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UserActedUpon")
                        .WithMany("JournalEntries")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActingUser");

                    b.Navigation("UserActedUpon");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Address", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.CityBlock", "CityBlock")
                        .WithMany()
                        .HasForeignKey("CityBlockId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("AddressType");

                    b.Navigation("CityBlock");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("Town");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.AddressType", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.CityBlock", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Country", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.County", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.RefreshToken", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("ApplicationUser");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Role", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Town", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.User", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.Address", null)
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.UserAddress", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivatedBy");

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("UndeletedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.UserRole", b =>
                {
                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "ReactivatedBy")
                        .WithMany()
                        .HasForeignKey("ReactivatedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "UndeletedBy")
                        .WithMany()
                        .HasForeignKey("UndeletedById");

                    b.HasOne("EventDriven.Domain.PoC.Domain.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReactivatedBy");

                    b.Navigation("Role");

                    b.Navigation("UndeletedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Address", b =>
                {
                    b.Navigation("UserAddresses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EventDriven.Domain.PoC.Domain.Domain.User", b =>
                {
                    b.Navigation("JournalEntries");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
