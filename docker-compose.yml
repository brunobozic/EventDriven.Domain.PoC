version: '3.9'
services:
  #api: 
  #   build:
  #    context: ./
  #    dockerfile: ./EventDriven.Domain.PoC.Api.Rest/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:80;https://+:443
  #     - ASPNETCORE_HTTP_PORT=6000
  #     - ASPNETCORE_HTTPS_PORT=6001 
  #     #- ASPNETCORE_Kestrel__Certificates__Default__Password=crypticpassword
  #     #- ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
  #   ports:
  #     - "6000:80"
  #     - "6001:443"
  #   networks:
  #    - jaeger-example
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
       - "5775:5775/udp"
       - "6831:6831/udp"
       - "6832:6832/udp"
       - "5778:5778"
       - "16686:16686"
       - "14268:14268"
       - "9411:9411"
    networks:
      - jaeger-example
  eureka-server:
    image:  steeltoeoss/eureka-server
    hostname: eureka-server
    ports:
      - "8761:8761"
    networks:
      - jaeger-example
  kafkaui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - jaeger-example
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - jaeger-example
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    links: 
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: "9094"
      KAFKA_CREATE_TOPICS: "mytopic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      HOSTNAME_COMMAND: "echo 127.0.0.1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
    
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jaeger-example
  consul-agent-1:
    image: consul:1.9.5
    networks:
      - consul-demo
    command: "agent -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-agent-2:
    # Complete copy of 'consul-agent-1'
    image: consul:1.9.5
    networks:
      - consul-demo
    command: "agent -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-agent-3:
    # Complete copy of 'consul-agent-1'
    image: consul:1.9.5
    networks:
      - consul-demo
    command: "agent -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-server-1:
    # Uses only image and networks from 'consul-agent-1'
    # while 'command' is overwritten
    image: consul:1.9.5
    networks:
      - consul-demo
    command: "agent -server -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-server-2:
    # Complete copy of 'consul-server-1'
    image: consul:1.9.5
    networks:
      - consul-demo
    command: "agent -server -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-server-bootstrap:
    # Uses only image and networks from 'consul-agent-1'
    # while 'command' is overwritten and 'ports' are defined
    image: consul:1.9.5
    networks:
      - consul-demo
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
      - "8600:8600/udp"
    command: "agent -server -bootstrap-expect 3 -ui -client 0.0.0.0"
networks:
  consul-demo:
  jaeger-example:
  consul:
    driver: bridge